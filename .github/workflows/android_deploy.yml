name: Android Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production
      version_name:
        description: 'Version name override (optional)'
        required: false
        type: string
  workflow_run:
    workflows:
      - Android Build
      - Android Tests
    types:
      - completed
    branches:
      - main

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Set up Gradle and restore cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Generate version code based on GitHub run number
        run: |
          VERSION_CODE=$((GITHUB_RUN_NUMBER + 10000))
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo $VERSION_CODE > version_code.txt

      - name: Extract version name from app/build.gradle.kts
        run: |
          # Extract from build.gradle (handle both kotlin and groovy formats)
          if [ -f "app/build.gradle.kts" ]; then
            VERSION_NAME=$(grep -o 'versionName = "[^"]*"' app/build.gradle.kts | cut -d '"' -f2)
          else
            VERSION_NAME=$(grep -o 'versionName "[^"]*"' app/build.gradle | cut -d '"' -f2)
          fi
          
          # Override if provided in workflow input
          if [ -n "${{ github.event.inputs.version_name }}" ]; then
            VERSION_NAME="${{ github.event.inputs.version_name }}"
          fi
          
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo $VERSION_NAME > version_name.txt
          echo "Using version name: $VERSION_NAME"

      - name: Create changelog from recent commits
        run: |
          git log -5 --pretty=format:"- %s" > changelog.txt
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          cat changelog.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload version information as artifact
        uses: actions/upload-artifact@v3
        with:
          name: version-info
          path: |
            version_code.txt
            version_name.txt
            changelog.txt
          retention-days: 1

  deploy-internal:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Set up Gradle and restore cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Download version information artifact
        uses: actions/download-artifact@v3
        with:
          name: version-info

      - name: Load version information
        run: |
          echo "VERSION_NAME=$(cat version_name.txt)" >> $GITHUB_ENV
          echo "VERSION_CODE=$(cat version_code.txt)" >> $GITHUB_ENV
          echo "Using version: $VERSION_NAME ($VERSION_CODE)"

      - name: Download release APK artifact from build workflow
        uses: actions/download-artifact@v3
        with:
          name: app-release
          path: app/build/outputs/apk/release/

      - name: Build Android App Bundle (AAB) for release
        run: |
          # Update version info in build.gradle if needed
          if [ -f "app/build.gradle.kts" ]; then
            sed -i "s/versionCode = .*/versionCode = $VERSION_CODE/" app/build.gradle.kts
            sed -i "s/versionName = .*/versionName = \"$VERSION_NAME\"/" app/build.gradle.kts
          else
            sed -i "s/versionCode .*/versionCode $VERSION_CODE/" app/build.gradle
            sed -i "s/versionName .*/versionName \"$VERSION_NAME\"/" app/build.gradle
          fi
          
          ./gradlew bundleRelease
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}

      - name: Decode keystore file
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Sign the Android App Bundle
        run: |
          # Find latest build tools version
          BUILD_TOOLS_VERSION=$(ls -1 $ANDROID_HOME/build-tools | sort -r | head -1)
          echo "Using build tools version: $BUILD_TOOLS_VERSION"
          
          # Sign the AAB
          java -jar $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/lib/apksigner.jar sign \
            --ks keystore.jks \
            --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
            --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
            --out app/build/outputs/bundle/release/app-release-signed.aab \
            app/build/outputs/bundle/release/app-release.aab
        
      - name: Create whatsnew directory for Play Store
        run: |
          mkdir -p distribution/whatsnew/en-US
          cat changelog.txt > distribution/whatsnew/en-US/whatsnew
        
      - name: Upload to Google Play internal testing track
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: ${{ secrets.PLAY_STORE_JSON_KEY }}
          packageName: com.jump.scanmonitorapps
          releaseFiles: app/build/outputs/bundle/release/app-release-signed.aab
          track: internal
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION_NAME }}
          name: Release v${{ env.VERSION_NAME }}
          body: |
            ScanMonitorApps v${{ env.VERSION_NAME }} (Internal)
            
            Changes:
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-firebase:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Download version information artifact
        uses: actions/download-artifact@v3
        with:
          name: version-info

      - name: Load version information
        run: |
          VERSION_NAME=$(cat version_name.txt)
          VERSION_CODE=$(cat version_code.txt)
          CHANGELOG=$(cat changelog.txt)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download debug APK artifact from build workflow
        uses: actions/download-artifact@v3
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers, jump-staff
          file: app/build/outputs/apk/debug/app-debug.apk
          releaseNotes: |
            Version: ${{ env.VERSION_NAME }} (${{ env.VERSION_CODE }})
            
            Changes:
            ${{ env.CHANGELOG }}

      - name: Notify testers via Firebase
        run: |
          echo "Debug build v${{ env.VERSION_NAME }} has been distributed via Firebase App Distribution"

  notify-deployment:
    needs: [deploy-internal, deploy-firebase]
    runs-on: ubuntu-latest
    steps:
      - name: Download version information artifact
        uses: actions/download-artifact@v3
        with:
          name: version-info

      - name: Prepare notification message with version and changes
        run: |
          VERSION_NAME=$(cat version_name.txt)
          CHANGELOG=$(cat changelog.txt)
          
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Send Slack notification about deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "title": "ScanMonitorApps v${{ env.VERSION_NAME }} Deployed",
                  "text": "New version deployed to Google Play Internal Testing and Firebase App Distribution\n\nChanges:\n${{ env.CHANGELOG }}",
                  "footer": "Jump ScanMonitorApps Deployment"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}